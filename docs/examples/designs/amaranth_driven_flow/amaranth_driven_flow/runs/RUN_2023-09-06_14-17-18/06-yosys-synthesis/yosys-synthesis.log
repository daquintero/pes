
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.30+48 (git sha1 14d50a176d5, clang++ 11.1.0 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /home/daquintero/piel/docs/examples/designs/amaranth_driven_flow/amaranth_driven_flow/src/our_truth_table_module.v
Parsing SystemVerilog input from `/home/daquintero/piel/docs/examples/designs/amaranth_driven_flow/amaranth_driven_flow/src/our_truth_table_module.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

2. Generating Graphviz representation of design.
Writing dot description to `/home/daquintero/piel/docs/examples/designs/amaranth_driven_flow/amaranth_driven_flow/runs/RUN_2023-09-06_14-17-18/06-yosys-synthesis/hierarchy.dot'.
Dumping module top to page 1.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \top

3.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.
Renaming module top to top.

4. Executing HIERARCHY pass (managing design hierarchy).

4.1. Analyzing design hierarchy..
Top module:  \top

4.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

5. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\top.$proc$/home/daquintero/piel/docs/examples/designs/amaranth_driven_flow/amaranth_driven_flow/src/our_truth_table_module.v:14$1'.
Cleaned up 1 empty switch.

6. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$/home/daquintero/piel/docs/examples/designs/amaranth_driven_flow/amaranth_driven_flow/src/our_truth_table_module.v:14$1 in module top.
Removed a total of 1 dead cases.

7. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 2 assignments to connections.

8. Executing PROC_INIT pass (extract init attributes).

9. Executing PROC_ARST pass (detect async resets in processes).

10. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~1 debug messages>

11. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\top.$proc$/home/daquintero/piel/docs/examples/designs/amaranth_driven_flow/amaranth_driven_flow/src/our_truth_table_module.v:7$2'.
Creating decoders for process `\top.$proc$/home/daquintero/piel/docs/examples/designs/amaranth_driven_flow/amaranth_driven_flow/src/our_truth_table_module.v:14$1'.
     1/1: $1\phase_map_out[1:0]

12. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\top.\$auto$verilog_backend.cc:2083:dump_module$1' from process `\top.$proc$/home/daquintero/piel/docs/examples/designs/amaranth_driven_flow/amaranth_driven_flow/src/our_truth_table_module.v:7$2'.
No latch inferred for signal `\top.\phase_map_out' from process `\top.$proc$/home/daquintero/piel/docs/examples/designs/amaranth_driven_flow/amaranth_driven_flow/src/our_truth_table_module.v:14$1'.

13. Executing PROC_DFF pass (convert process syncs to FFs).

14. Executing PROC_MEMWR pass (convert process memory writes to cells).

15. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `top.$proc$/home/daquintero/piel/docs/examples/designs/amaranth_driven_flow/amaranth_driven_flow/src/our_truth_table_module.v:7$2'.
Found and cleaned up 1 empty switch in `\top.$proc$/home/daquintero/piel/docs/examples/designs/amaranth_driven_flow/amaranth_driven_flow/src/our_truth_table_module.v:14$1'.
Removing empty process `top.$proc$/home/daquintero/piel/docs/examples/designs/amaranth_driven_flow/amaranth_driven_flow/src/our_truth_table_module.v:14$1'.
Cleaned up 1 empty switch.

16. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

17. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1 debug messages>

18. Executing FLATTEN pass (flatten design).

19. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

21. Executing OPT pass (performing simple optimizations).

21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

21.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

21.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New ctrl vector for $pmux cell $procmux$4: { $procmux$8_CMP $procmux$7_CMP $auto$opt_reduce.cc:134:opt_pmux$10 }
  Optimizing cells in module \top.
Performed a total of 1 changes.

21.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

21.6. Executing OPT_DFF pass (perform DFF optimizations).

21.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

21.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

21.9. Rerunning OPT passes. (Maybe there is more to do..)

21.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

21.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

21.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

21.13. Executing OPT_DFF pass (perform DFF optimizations).

21.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

21.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

21.16. Finished OPT passes. (There is nothing left to do.)

22. Executing FSM pass (extract and optimize FSM).

22.1. Executing FSM_DETECT pass (finding FSMs in design).

22.2. Executing FSM_EXTRACT pass (extracting FSM from design).

22.3. Executing FSM_OPT pass (simple optimizations of FSMs).

22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

22.5. Executing FSM_OPT pass (simple optimizations of FSMs).

22.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

22.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

22.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

23. Executing OPT pass (performing simple optimizations).

23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

23.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

23.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

23.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

23.6. Executing OPT_DFF pass (perform DFF optimizations).

23.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

23.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

23.9. Finished OPT passes. (There is nothing left to do.)

24. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell top.$procmux$7_CMP0 ($eq).

25. Executing PEEPOPT pass (run peephole optimizers).

26. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

27. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  created 0 $alu and 0 $macc cells.

28. Executing SHARE pass (SAT-based resource sharing).

29. Executing OPT pass (performing simple optimizations).

29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

29.6. Executing OPT_DFF pass (perform DFF optimizations).

29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

29.9. Finished OPT passes. (There is nothing left to do.)

30. Executing MEMORY pass.

30.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

30.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

30.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

30.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

30.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

30.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

30.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

30.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

30.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

30.10. Executing MEMORY_COLLECT pass (generating $mem cells).

31. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

32. Executing OPT pass (performing simple optimizations).

32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1 debug messages>

32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

32.3. Executing OPT_DFF pass (perform DFF optimizations).

32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

32.5. Finished fast OPT passes.

33. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

34. Executing OPT pass (performing simple optimizations).

34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

34.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

34.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

34.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

34.6. Executing OPT_SHARE pass.

34.7. Executing OPT_DFF pass (perform DFF optimizations).

34.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

34.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

34.10. Finished OPT passes. (There is nothing left to do.)

35. Executing TECHMAP pass (map to technology primitives).

35.1. Executing Verilog-2005 frontend: /nix/store/s60fmmgwaxhgbnishnn1d23m11gb8pb7-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/s60fmmgwaxhgbnishnn1d23m11gb8pb7-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

35.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$521ce43182eecb9f60c72393a788160d2c356bf5\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $mux.
No more expansions possible.
<suppressed ~97 debug messages>

36. Executing OPT pass (performing simple optimizations).

36.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~11 debug messages>

36.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

36.3. Executing OPT_DFF pass (perform DFF optimizations).

36.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 26 unused wires.
<suppressed ~1 debug messages>

36.5. Finished fast OPT passes.

37. Executing ABC pass (technology mapping using ABC).

37.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 12 gates and 15 wires to a netlist network with 2 inputs and 2 outputs.

37.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash
ABC: + dretime
ABC: + map
ABC: + write_blif <abc-temp-dir>/output.blif

37.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:                OR cells:        2
ABC RESULTS:        internal signals:       11
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        2
Removing temp directory.

38. Executing OPT pass (performing simple optimizations).

38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

38.3. Executing OPT_DFF pass (perform DFF optimizations).

38.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 13 unused wires.
<suppressed ~1 debug messages>

38.5. Finished fast OPT passes.

39. Executing HIERARCHY pass (managing design hierarchy).

39.1. Analyzing design hierarchy..
Top module:  \top

39.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

40. Printing statistics.

=== top ===

   Number of wires:                  5
   Number of wire bits:              7
   Number of public wires:           3
   Number of public wire bits:       5
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     $_ANDNOT_                       1
     $_AND_                          1
     $_OR_                           2

41. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

42. Generating Graphviz representation of design.
Writing dot description to `/home/daquintero/piel/docs/examples/designs/amaranth_driven_flow/amaranth_driven_flow/runs/RUN_2023-09-06_14-17-18/06-yosys-synthesis/post_techmap.dot'.
Dumping module top to page 1.

43. Executing SHARE pass (SAT-based resource sharing).

44. Executing OPT pass (performing simple optimizations).

44.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

44.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

44.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

44.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

44.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

44.6. Executing OPT_DFF pass (perform DFF optimizations).

44.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

44.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

44.9. Finished OPT passes. (There is nothing left to do.)

45. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>
{
   "creator": "Yosys 0.30+48 (git sha1 14d50a176d5, clang++ 11.1.0 -fPIC -Os)",
   "invocation": "stat -json ",
   "modules": {
      "\\top": {
         "num_wires":         4,
         "num_wire_bits":     6,
         "num_pub_wires":     2,
         "num_pub_wire_bits": 4,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         4,
         "num_cells_by_type": {
            "$_ANDNOT_": 1,
            "$_AND_": 1,
            "$_OR_": 2
         }
      }
   },
      "design": {
         "num_wires":         4,
         "num_wire_bits":     6,
         "num_pub_wires":     2,
         "num_pub_wire_bits": 4,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         4,
         "num_cells_by_type": {
            "$_ANDNOT_": 1,
            "$_AND_": 1,
            "$_OR_": 2
         }
      }
}

[INFO] Applying latch mapping from '/home/daquintero/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v'â¦

46. Executing TECHMAP pass (map to technology primitives).

46.1. Executing Verilog-2005 frontend: /home/daquintero/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/daquintero/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

46.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

47. Executing SIMPLEMAP pass (map simple cells to gate primitives).

48. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

48.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\top':
{
   "creator": "Yosys 0.30+48 (git sha1 14d50a176d5, clang++ 11.1.0 -fPIC -Os)",
   "invocation": "stat -json ",
   "modules": {
      "\\top": {
         "num_wires":         4,
         "num_wire_bits":     6,
         "num_pub_wires":     2,
         "num_pub_wire_bits": 4,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         4,
         "num_cells_by_type": {
            "$_ANDNOT_": 1,
            "$_AND_": 1,
            "$_OR_": 2
         }
      }
   },
      "design": {
         "num_wires":         4,
         "num_wire_bits":     6,
         "num_pub_wires":     2,
         "num_pub_wire_bits": 4,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         4,
         "num_cells_by_type": {
            "$_ANDNOT_": 1,
            "$_AND_": 1,
            "$_OR_": 2
         }
      }
}

[INFO] USING STRATEGY AREA 0

49. Executing ABC pass (technology mapping using ABC).

49.1. Extracting gate netlist of module `\top' to `/run/user/1000/yosys-abc-ugo5R3/input.blif'..
Extracted 4 gates and 6 wires to a netlist network with 2 inputs and 2 outputs.

49.1.1. Executing ABC.
Running ABC command: "/nix/store/s60fmmgwaxhgbnishnn1d23m11gb8pb7-yosys/bin/yosys-abc" -s -f /run/user/1000/yosys-abc-ugo5R3/abc.script 2>&1
ABC: ABC command line: "source /run/user/1000/yosys-abc-ugo5R3/abc.script".
ABC:
ABC: + read_blif /run/user/1000/yosys-abc-ugo5R3/input.blif
ABC: + read_lib -w /home/daquintero/piel/docs/examples/designs/amaranth_driven_flow/amaranth_driven_flow/runs/RUN_2023-09-06_14-17-18/tmp/298698c6740b497faf9a88e03a399ea2.lib
ABC: Parsing finished successfully.  Parsing time =     0.06 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/home/daquintero/piel/docs/examples/designs/amaranth_driven_flow/amaranth_driven_flow/runs/RUN_2023-09-06_14-17-18/tmp/298698c6740b497faf9a88e03a399ea2.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.09 sec
ABC: Memory =    9.54 MB. Time =     0.09 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /home/daquintero/piel/docs/examples/designs/amaranth_driven_flow/amaranth_driven_flow/runs/RUN_2023-09-06_14-17-18/06-yosys-synthesis/synthesis.sdc
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2/Y".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /home/daquintero/piel/docs/examples/designs/amaranth_driven_flow/amaranth_driven_flow/runs/RUN_2023-09-06_14-17-18/06-yosys-synthesis/synthesis.sdc
ABC: + fx
ABC: + mfs
ABC: + strash
ABC: + refactor
ABC: + balance
ABC: + rewrite
ABC: + refactor
ABC: + balance
ABC: + rewrite
ABC: + rewrite -z
ABC: + balance
ABC: + refactor -z
ABC: + rewrite -z
ABC: + balance
ABC: + retime -D -D 10000 -M 5
ABC: + scleanup
ABC: Error: The network is combinational.
ABC: + fraig_store
ABC: + balance
ABC: + fraig_store
ABC: + balance
ABC: + rewrite
ABC: + refactor
ABC: + balance
ABC: + rewrite
ABC: + rewrite -z
ABC: + balance
ABC: + refactor -z
ABC: + rewrite -z
ABC: + balance
ABC: + fraig_store
ABC: + balance
ABC: + rewrite
ABC: + refactor
ABC: + balance
ABC: + rewrite
ABC: + rewrite -z
ABC: + balance
ABC: + refactor -z
ABC: + rewrite -z
ABC: + balance
ABC: + fraig_store
ABC: + balance
ABC: + rewrite
ABC: + refactor
ABC: + balance
ABC: + rewrite
ABC: + rewrite -z
ABC: + balance
ABC: + refactor -z
ABC: + rewrite -z
ABC: + balance
ABC: + fraig_store
ABC: + fraig_restore
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000
ABC: + retime -D -D 10000
ABC: + &get -n
ABC: + &st
ABC: + &dch
ABC: + &nf
ABC: + &put
ABC: + buffer -N 10 -S 750.0
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: + upsize -D 10000
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: Current delay (424.59 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: + stime -p
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: WireLoad = "none"  Gates =      4 ( 75.0 %)   Cap = 12.7 ff ( 18.8 %)   Area =       17.52 ( 25.0 %)   Delay =   487.79 ps  ( 50.0 %)
ABC: Path  0 --       1 : 0    1 pi                     A =   0.00  Df =   0.0   -0.0 ps  S =   0.0 ps  Cin =  0.0 ff  Cout =   1.6 ff  Cmax =   0.0 ff  G =    0
ABC: Path  1 --       7 : 2    1 sky130_fd_sc_hd__or2_2 A =   6.26  Df = 266.4 -190.4 ps  S =  51.4 ps  Cin =  1.5 ff  Cout =   2.2 ff  Cmax = 299.4 ff  G =  144
ABC: Path  2 --       8 : 1    1 sky130_fd_sc_hd__buf_1 A =   3.75  Df = 487.8  -95.7 ps  S = 395.7 ps  Cin =  2.1 ff  Cout =  33.4 ff  Cmax = 130.0 ff  G = 1590
ABC: Start-point = pi0 (\detector_in [0]).  End-point = po1 (\phase_map_out [1]).
ABC: + print_stats -m
ABC: netlist                       : i/o =    2/    2  lat =    0  nd =     4  edge =      5  area =17.51  delay = 2.00  lev = 2
ABC: + write_blif /run/user/1000/yosys-abc-ugo5R3/output.blif

49.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:        3
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        2
Removing temp directory.

50. Executing SETUNDEF pass (replace undef values with defined constants).

51. Executing HILOMAP pass (mapping to constant drivers).
Warning: Selection "sky130_fd_sc_hd__conb_1" did not match any module.
Warning: Selection "LO" did not match any object.

52. Executing SPLITNETS pass (splitting up multi-bit signals).

53. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

54. Executing INSBUF pass (insert buffer cells for connected wires).

55. Executing CHECK pass (checking for obvious problems).
Checking module top...
Warning: Wire top.\phase_map_out [1] is used but has no driver.
Warning: Wire top.\phase_map_out [0] is used but has no driver.
Found and reported 2 problems.
{
   "creator": "Yosys 0.30+48 (git sha1 14d50a176d5, clang++ 11.1.0 -fPIC -Os)",
   "invocation": "stat -json ",
   "modules": {
      "\\top": {
         "num_wires":         4,
         "num_wire_bits":     6,
         "num_pub_wires":     2,
         "num_pub_wire_bits": 4,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         4,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__buf_1": 3,
            "sky130_fd_sc_hd__or2_2": 1
         }
      }
   },
      "design": {
         "num_wires":         4,
         "num_wire_bits":     6,
         "num_pub_wires":     2,
         "num_pub_wire_bits": 4,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         4,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__buf_1": 3,
            "sky130_fd_sc_hd__or2_2": 1
         }
      }
}

56. Executing Verilog backend.
Dumping module `\top'.

Warnings: 4 unique messages, 4 total
End of script. Logfile hash: 4dd2ea85f8, CPU: user 0.13s system 0.00s, MEM: 454.12 MB peak
Yosys 0.30+48 (git sha1 14d50a176d5, clang++ 11.1.0 -fPIC -Os)
Time spent: 67% 2x abc (0 sec), 17% 1x dfflibmap (0 sec), ...
